var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [TestingUtilities]\nOrder   = [:macro, :type, :function] \nPrivate = false","category":"page"},{"location":"api/#TestingUtilities.@Test-Tuple","page":"API","title":"TestingUtilities.@Test","text":"@Test [io=stderr] [set_failed_values=nothing] test_expr\n\nEvaluates test_expr in the context of the Test module (i.e., runs the equivalent to @test $test_expr).\n\nIf test_expr does not pass, either due to an exception or the test itself runs but does not return the expected value, an error message is printed to io with the values of the top-level expressions and any bare symbols extracted from test_expr\n\nWhen executed from an interactive Julia session and \n\n_GLOBAL_DEFINE_VARS_IN_FAILED_TESTS[] == true and set_failed_values != false\n\nor\n\nset_failed_values == true \n\nthe names + values of the bare symbols in test_expr are set in the Main module to simplify debugging the failing test case. \n\n\n\n\n\n","category":"macro"},{"location":"api/#TestingUtilities.@test_cases-Tuple","page":"API","title":"TestingUtilities.@test_cases","text":"@test_cases [io=stderr] begin \n    [test cases] \n\n    [test expressions]\nend\n\nCreate a set of test data and, for each test data point, evaluates one or more test expressions on them. The values in each test case that cause the test to fail or for an exception to be thrown will be written to io. \n\n[test cases] must be a series of expressions of the form\n\n    variable₁ | variable₂ | ... | variableₙ \n    value₁₁   | value₁₂   | ... | value₁ₙ\n    value₂₁   | value₂₂   | ... | value₂ₙ\n    ...\n    valueₘ₁   | valueₘ₂   | ... | valueₘₙ\n\nEquivalent forms of value₁ | value₂ | ... | valueₙ are\n\n(variable₁ = value₁, variable₂ = value₂, ..., variableₙ = valueₙ)\n\nor \n\nvariable₁ => value₁, variable₂ => value₂, ..., variableₙ  => valueₙ\n\nNote: The variableᵢ can involve expressions that refer to variableⱼ for any j < i. E.g., the following is a valid [test_case] expression: \n\n    x  | y   | z\n    1  | x^2 | y-x\n\n[test expressions] must be a series of one or more test evaluation expressions \n\ne.g., \n\n    @test cond₁\n    @test cond₂ \n    ...\n    @test condₖ\n\nor a single begin ... end expression containing one or more test evaluation expressions, as well as other expressions that will be evaluated for each input data value\n\ne.g., \n\nbegin \n    expr₁ \n    @test cond₁ \n    expr₂\n    @test cond₂\n    ...\nend\n\nNote, each test condition expression condᵢ must evaluate to a Bool and contains zero or more values from variable₁, variable₂, ..., variableₙ.\n\n\n\n\n\n","category":"macro"},{"location":"api/#TestingUtilities.@test_eventually-Tuple","page":"API","title":"TestingUtilities.@test_eventually","text":"@test_eventually [io=stderr] [timeout=duration] [sleep=duration] [repeat=false] test_expr\n\nEvalutes test_expr in the context of the Test module (i.e., runs the equivalent to @test $test_expr), and ensures that it passes within a given time frame.\n\nIf test_expr does not return a value within the specified timeout, the test fails with a TestTimedOutException. This macro checks sleep amount of time for the test expression to return a value, until timeout is reached. \n\nIf repeat == true and the first invocation of test_expr returns false, repeats the call to test_expr until it returns true or it times out.\n\nDuration Types\n\nIf key = value is given for key = sleep or key = timeout, then\n\nif value::Int - the corrresponding duration is converted to a Millisecond(value)\nif value is an expression of the form num*unit for num::Int and unit is one of the shorthand durations (ms, s, m, h, d, w, month, y), the resulting duration will be converted to its equivalent unit from the Dates module   e.g., value = 1m => Dates.Minute(1)         value = 2s => Dates.Second(2)\notherwise, value must be a valid Dates.Period expression\n\n\n\n\n\n","category":"macro"},{"location":"api/#TestingUtilities.TaskTimedOutException","page":"API","title":"TestingUtilities.TaskTimedOutException","text":"TaskTimedOutException(timer)\n\nException thrown when the callback function attached to timer took longer than timer.max_time to return a value\n\n\n\n\n\n","category":"type"},{"location":"api/#TestingUtilities.TestTimedOutException","page":"API","title":"TestingUtilities.TestTimedOutException","text":"TestTimedOutException(max_time, original_ex)\n\nException thrown when the test given by original_ex took longer than max_time to return a value\n\n\n\n\n\n","category":"type"},{"location":"api/#TestingUtilities.define_vars_in_failed_tests-Tuple{Bool}","page":"API","title":"TestingUtilities.define_vars_in_failed_tests","text":"define_vars_in_failed_tests(value::Bool)\n\nIf value is true, variables that cause a @Test expression to fail will be defined in Main when Julia is run in interactive mode.\n\nDefaults to true if unset. \n\n\n\n\n\n","category":"method"},{"location":"api/#Settings","page":"API","title":"Settings","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TestingUtilities.set_show_diff_styles(; matching, differing)\nTestingUtilities.set_show_df_opts(; max_num_rows, max_num_cols, save_preference)\nTestingUtilities.set_show_diff_df_opts(; max_num_rows, max_num_cols, save_preference)\nTestingUtilities.set_max_print_length(; max_print_length, save_preference)","category":"page"},{"location":"api/#TestingUtilities.set_show_diff_styles-Tuple{}","page":"API","title":"TestingUtilities.set_show_diff_styles","text":"set_show_diff_styles(; matching=show_diff_matching_style, differing=show_diff_differing_style)\n\nSets the local style information for the show_diff method, which is invoked when displaying two differing String values. \n\nBoth matching and differing must each be a Pair whose keys and values correspond to the keyword arguments of the Base.printstyled function, or a Vector of such Pairs.\n\n\n\n\n\n","category":"method"},{"location":"api/#TestingUtilities.set_show_df_opts-Tuple{}","page":"API","title":"TestingUtilities.set_show_df_opts","text":"set_show_df_opts(; [max_num_rows::Int=0], [max_num_cols::Int=0], [save_preference::Bool=true])\n\nSets the local maximum # of rows + columns to show when printing DataFrame values. \n\nIf non-positive values for max_num_rows or max_num_cols are provided, these will be set to max_num_of_rows = 5 and max_num_cols = 10, respectively.\n\nIf save_preference == true, will save this local preference with keys show_df.max_num_rows, show_df.max_num_cols.\n\n\n\n\n\n","category":"method"},{"location":"api/#TestingUtilities.set_show_diff_df_opts-Tuple{}","page":"API","title":"TestingUtilities.set_show_diff_df_opts","text":"set_show_diff_df_opts(; [max_num_rows::Int = 0], [max_num_cols::Int = 0], [save_preference::Bool = true])\n\nSets the local maximum # of rows + columns to show when printing differences of DataFrame values. \n\nIf either max_num_rows or max_num_cols are non-positive, they will be set to max_num_rows = 10 and max_num_cols = 10, respectively.\n\nIf save_preference == true, will save this local preference with keys show_diff_df.max_num_rows, show_diff_df.max_num_cols.\n\n\n\n\n\n","category":"method"},{"location":"api/#TestingUtilities.set_max_print_length-Tuple{}","page":"API","title":"TestingUtilities.set_max_print_length","text":"set_max_print_length(; [max_print_length::Int=0], [save_preference::Bool=true])\n\nSets the local maximum # characters to print for each displayed value in, e.g., a failing test\n\nIf max_print_length is not provided or if non-positive values are provided, will be set to max_print_length = 300\n\nIf save_preference == true, will save this local preference with key max_print_length\n\n\n\n\n\n","category":"method"},{"location":"settings/#Settings","page":"Settings","title":"Settings","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"TestingUtilities makes use of the Preferences package to store package-side settings for various test failure scenarios.","category":"page"},{"location":"settings/#Comparison-Tests","page":"Settings","title":"Comparison Tests","text":"","category":"section"},{"location":"settings/#Strings","page":"Settings","title":"Strings","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"When performing an equality comparison test between two String values, say x and y, if the test fails and the provided io object supports printing colours, the matching shared prefix of x and y will be rendered in green while the differing components of x and y will be rendered in red.","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"using TestingUtilities, Test\n\nmutable struct NoThrowTestSet <: Test.AbstractTestSet\n    results::Vector\n    NoThrowTestSet(desc) = new([])\nend\nTest.record(ts::NoThrowTestSet, t::Test.Result) = (push!(ts.results, t); t)\nTest.finish(ts::NoThrowTestSet) = ts.results\ntest_results_match = (results, ref_results)-> all(result isa ref_result for (result, ref_result) in zip(results, ref_results) )\n\nTestingUtilities.set_show_diff_styles(; matching=:color => :green, differing=:color => :red)","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"a = \"abcd\" \nb = \"abef\"\nc = \"abeghik\"\n@testset NoThrowTestSet \"\" begin \n    @Test a == b\n    @Test isequal(c, \"abeg\")\nend\nnothing # hide","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"If you're unable to distinguish between the default colours (or colours more generally), you can set the styles used to render the matching components and differing components of the strings by invoking TestingUtilities.set_show_diff_styles. You can use any key => value pair corresponding to the keyword arguments of Base.printstyled.","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"TestingUtilities.set_show_diff_styles(; matching=:bold => true, differing=:underline => true)\n@testset NoThrowTestSet \"\" begin \n    @Test a == b\n    @Test isequal(c, \"abeg\")\nend\nnothing # hide","category":"page"},{"location":"settings/#DataFrames","page":"Settings","title":"DataFrames","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Similarly, when performing an equality test between two DataFrames, TestUtilities will display a nicely-formatted message detailing the reason for the difference between the two values, e.g., ","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"using DataFrames \n\nTestingUtilities.set_show_diff_styles(; matching=:color => :green, differing=:color => :red) # hide \n\nx = DataFrame(:a => [1, 2, 4], :b => [false, true, true])\nx_diffcols = DataFrame(:a => [1, 2, 4], :z => [false, false, true])\nx_diffnrows = DataFrame(:a => [1, 2], :b => [false, true])\nx_diffvalues = DataFrame(:a => [1, 2, 3], :b => [false, false, true])\n@testset NoThrowTestSet \"\" begin \n    @Test x == x_diffcols \n    @Test x == x_diffnrows \n    @Test x == x_diffvalues\nend\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TestingUtilities","category":"page"},{"location":"#TestingUtilities","page":"Home","title":"TestingUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The TestingUtilities provides macros that make testing your code less tedious and (hopefully) more insightful. ","category":"page"}]
}
