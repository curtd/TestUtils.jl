var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [TestingUtilities]\nOrder   = [:macro, :function] \nPrivate = false","category":"page"},{"location":"api/#TestingUtilities.@Test-Tuple","page":"API","title":"TestingUtilities.@Test","text":"@Test [io=stderr] [set_failed_values=nothing] test_expr\n\nEvaluates test_expr in the context of the Test module (i.e., runs the equivalent to @test $test_expr).\n\nIf test_expr does not pass, either due to an exception or the test itself runs but does not return the expected value, an error message is printed to io with the values of the top-level expressions and any bare symbols extracted from test_expr\n\nWhen executed from an interactive Julia session and \n\n_GLOBAL_DEFINE_VARS_IN_FAILED_TESTS[] == true and set_failed_values != false\n\nor\n\nset_failed_values == true \n\nthe names + values of the bare symbols in test_expr are set in the Main module to simplify debugging the failing test case. \n\n\n\n\n\n","category":"macro"},{"location":"api/#TestingUtilities.@test_cases-Tuple","page":"API","title":"TestingUtilities.@test_cases","text":"@test_cases [io=stderr] begin \n    [test cases] \n\n    [test expressions]\nend\n\nCreate a set of test data and, for each test data point, evaluates one or more test expressions on them. The values in each test case that cause the test to fail or for an exception to be thrown will be written to io. \n\n[test cases] must be a series of expressions of the form\n\n    variable₁ | variable₂ | ... | variableₙ \n    value₁₁   | value₁₂   | ... | value₁ₙ\n    value₂₁   | value₂₂   | ... | value₂ₙ\n    ...\n    valueₘ₁   | valueₘ₂   | ... | valueₘₙ\n\nEquivalent forms of value₁ | value₂ | ... | valueₙ are\n\n(variable₁ = value₁, variable₂ = value₂, ..., variableₙ = valueₙ)\n\nor \n\nvariable₁ => value₁, variable₂ => value₂, ..., variableₙ  => valueₙ\n\nNote: The variableᵢ can involve expressions that refer to variableⱼ for any j < i. E.g., the following is a valid [test_case] expression: \n\n    x  | y   | z\n    1  | x^2 | y-x\n\n[test expressions] must be a series of one or more test evaluation expressions \n\n    @test cond₁\n    @test cond₂ \n    ...\n    @test condₖ\n\nHere, each test condition expression condᵢ evalutes to a Bool and contains zero or more values from variable₁, variable₂, ..., variableₙ.\n\n\n\n\n\n","category":"macro"},{"location":"api/#TestingUtilities.define_vars_in_failed_tests-Tuple{Bool}","page":"API","title":"TestingUtilities.define_vars_in_failed_tests","text":"define_vars_in_failed_tests(value::Bool)\n\nIf value is true, variables that cause a @Test expression to fail will be  defined in Main when Julia is run in interactive mode.\n\nDefaults to true if unset. \n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TestingUtilities","category":"page"},{"location":"#TestingUtilities","page":"Home","title":"TestingUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The TestingUtilities provides macros that make testing your code less tedious and more insightful. ","category":"page"}]
}
